<?php
/**
 * Created by PhpStorm.
 * User: florian
 * Date: 16/11/2018
 * Time: 20:14
 */

class ProductGateway
{
    public static function GetProducts(): array
    {
        global $dblogin, $dbpassword, $dsn;
        $con = new Connexion($dsn, $dblogin, $dbpassword);

        $products = array();

        $query = "SELECT id, id_copy, name, price, stock, description_big, description_small, category, creation_date, image, number_of_review, number_of_stars, custom_id FROM product ORDER BY name";
        $con->executeQuery($query);
        $results = $con->getResults();

        $query = "SELECT name, parent, image, description, rank FROM category";
        $con->executeQuery($query);
        $categories = $con->getResults();

        $query = "SELECT image, product_id FROM thumbnails;";
        $con->executeQuery($query);
        $thumbnails_list_db = $con->getResults();

        foreach ($results as $r){
            foreach ($categories as $category) {
                if($category['name'] == $r['category']){
                    $categ = new Category($category['name'], $category['parent'], new ImageCategory($category['image']), $category['description'], $category['rank']);
                    $product = new Product($r['id'], $r['id_copy'], $r['name'], $r['price'], $r['stock'], $r['description_big'], $r['description_small'], $categ, $r['creation_date'], new ImageProduct("null", $r['image']), $r['number_of_review'], $r['number_of_stars'], $r['custom_id']);

                    if($thumbnails_list_db != null){
                        foreach ($thumbnails_list_db as $t){
                            if($product->getId() == $t['product_id']){
                                $product->getImage()->addThumbnail(new Image($t['image']));
                            }
                        }
                    }
                    $products[] = $product;
                }
            }
        }

        return $products;
    }

    public static function GetHighlightedProducts()
    {
        global $dblogin, $dbpassword, $dsn;
        $con = new Connexion($dsn, $dblogin, $dbpassword);

        $results = array();

        $query = "SELECT id, product_id, position FROM highlighted_products ORDER BY position";
        $con->executeQuery($query);
        $highlighted_products = $con->getResults();

        $query = "SELECT id, id_copy, name, price, stock, description_big, description_small, category, creation_date, image, number_of_review, number_of_stars, custom_id FROM product ORDER BY name";
        $con->executeQuery($query);
        $products = $con->getResults();

        $query = "SELECT name, parent, image, description, rank FROM category";
        $con->executeQuery($query);
        $categories = $con->getResults();

        $query = "SELECT image, product_id FROM thumbnails;";
        $con->executeQuery($query);
        $thumbnails_list_db = $con->getResults();

        foreach ($highlighted_products as $highlighted_product) {
            foreach ($products as $product) {
                if($highlighted_product['product_id'] == $product['id']) {
                    foreach ($categories as $category) {
                        if ($category['name'] == $product['category']) {
                            $categ = new Category($category['name'], $category['parent'], new ImageCategory($category['image']), $category['description'], $category['rank']);
                            $p = new Product($product['id'], $product['id_copy'], $product['name'], $product['price'], $product['stock'], $product['description_big'], $product['description_small'], $categ, $product['creation_date'], new ImageProduct("null", $product['image']), $product['number_of_review'], $product['number_of_stars'], $product['custom_id']);

                            if ($thumbnails_list_db != null) {
                                foreach ($thumbnails_list_db as $t) {
                                    if ($p->getId() == $t['product_id']) {
                                        $p->getImage()->addThumbnail(new Image($t['image']));
                                    }
                                }
                            }
                            $results[] = $p;
                        }
                    }
                }
            }
        }

        return $results;
    }

    public static function AddProduct(String $id, String $name, float $price, int $stock, String $description_big, String $description_small, String $category, String $creation_date, String $image, String $custom_id){
        global $dblogin, $dbpassword, $dsn;
        $con = new Connexion($dsn, $dblogin, $dbpassword);

        $query = "INSERT INTO product VALUES (:id, :id_copy, :name, :price, :stock, :description_big, :description_small, :category, :creation_date, :image, 0, 0, :custom_id)";
        $con->executeQuery($query, array(
            ':id' => array($id, PDO::PARAM_STR),
            ':id_copy' => array($id, PDO::PARAM_STR),
            ':name' => array($name, PDO::PARAM_STR),
            ':price' => array($price, PDO::PARAM_STR),
            ':stock' => array($stock, PDO::PARAM_INT),
            ':description_big' => array($description_big, PDO::PARAM_STR),
            ':description_small' => array($description_small, PDO::PARAM_STR),
            ':category' => array($category, PDO::PARAM_STR),
            ':creation_date' => array($creation_date, PDO::PARAM_STR),
            ':image' => array($image, PDO::PARAM_STR),
            'custom_id' => array($custom_id, PDO::PARAM_STR)
        ));

        $query = "INSERT INTO product_backup VALUES (:id_backup, :id, :id_copy, :name, :price, :stock, :description_big, :description_small, :category, :creation_date, :image, :custom_id)";
        $con->executeQuery($query, array(
            ':id_backup' => array(uniqid('backup-product-'), PDO::PARAM_STR),
            ':id' => array($id, PDO::PARAM_STR),
            ':id_copy' => array($id, PDO::PARAM_STR),
            ':name' => array($name, PDO::PARAM_STR),
            ':price' => array($price, PDO::PARAM_STR),
            ':stock' => array($stock, PDO::PARAM_INT),
            ':description_big' => array($description_big, PDO::PARAM_STR),
            ':description_small' => array($description_small, PDO::PARAM_STR),
            ':category' => array($category, PDO::PARAM_STR),
            ':creation_date' => array($creation_date, PDO::PARAM_STR),
            ':image' => array($image, PDO::PARAM_STR),
            ':custom_id' => array($custom_id, PDO::PARAM_STR)
        ));
    }

    public static function AddHighlightProduct(String $product_id){
        global $dblogin, $dbpassword, $dsn;
        $con = new Connexion($dsn, $dblogin, $dbpassword);

        $query = "SELECT count(*) FROM highlighted_products;";
        $con->executeQuery($query);
        $position = $con->getResults();

        $query = "INSERT INTO highlighted_products VALUES (:id, :product_id, :position);";
        $con->executeQuery($query, array(
            ':id' => array(uniqid('highlight-'), PDO::PARAM_STR),
            ':product_id' => array($product_id, PDO::PARAM_STR),
            ':position' => array($position, PDO::PARAM_INT)
        ));
    }

    public static function RemoveHighlightProduct(String $product_id){
        global $dblogin, $dbpassword, $dsn;
        $con = new Connexion($dsn, $dblogin, $dbpassword);

        $query = "DELETE FROM highlighted_products WHERE product_id=:product_id;";
        $con->executeQuery($query, array(
            ':product_id' => array($product_id, PDO::PARAM_STR)
        ));
    }

    public static function UpdateProduct($id_copy, $id, $name, $price, $stock, $description_big, $description_small, $creation_date, $image_name, $custom_id){
        global $dblogin, $dbpassword, $dsn;
        $con = new Connexion($dsn, $dblogin, $dbpassword);

        $query = "UPDATE product SET name=:name, price=:price, stock=:stock, description_big=:description_big, description_small=:description_small, creation_date=:creation_date, image=:image_name, custom_id=:custom_id WHERE id=:id;";
        $con->executeQuery($query, array(
            ':id' => array($id, PDO::PARAM_STR),
            ':name' => array($name, PDO::PARAM_STR),
            ':price' => array($price, PDO::PARAM_STR),
            ':stock' => array($stock, PDO::PARAM_INT),
            ':description_big' => array($description_big, PDO::PARAM_STR),
            ':description_small' => array($description_small, PDO::PARAM_STR),
            ':creation_date' => array($creation_date, PDO::PARAM_STR),
            ':image_name' => array($image_name, PDO::PARAM_STR),
            ':custom_id' => array($custom_id, PDO::PARAM_STR)
        ));

        $query = "UPDATE product SET name=:name, price=:price, stock=:stock, description_big=:description_big, description_small=:description_small, creation_date=:creation_date, image=:image_name, custom_id=:custom_id WHERE id_copy=:id_copy;";
        $con->executeQuery($query, array(
            ':id_copy' => array($id_copy, PDO::PARAM_STR),
            ':name' => array($name, PDO::PARAM_STR),
            ':price' => array($price, PDO::PARAM_STR),
            ':stock' => array($stock, PDO::PARAM_INT),
            ':description_big' => array($description_big, PDO::PARAM_STR),
            ':description_small' => array($description_small, PDO::PARAM_STR),
            ':creation_date' => array($creation_date, PDO::PARAM_STR),
            ':image_name' => array($image_name, PDO::PARAM_STR),
            ':custom_id' => array($custom_id, PDO::PARAM_STR)
        ));

        unset($_SESSION['test']);
    }

    public static function CloneProduct(String $category, String $id_copy, String $id){
        global $dblogin, $dbpassword, $dsn;
        $con = new Connexion($dsn, $dblogin, $dbpassword);

        // PRODUCT INFOS

        $query = "SELECT name, price, stock, description_big, description_small, creation_date, image, number_of_review, number_of_stars, custom_id FROM product WHERE id_copy=:id_copy;";
        $con->executeQuery($query, array(':id_copy' => array($id_copy, PDO::PARAM_STR)));
        $product_db = $con->getResults()[0];

        $query = "INSERT INTO product VALUES(:id, :id_copy, :name, :price, :stock, :description_big, :description_small, :category, :creation_date, :image, :number_of_review, :number_of_stars, :custom_id);";
        $con->executeQuery($query, array(
            ':id' => array($id, PDO::PARAM_STR),
            ':id_copy' => array($id_copy, PDO::PARAM_STR),
            ':name' => array($product_db['name'], PDO::PARAM_STR),
            ':price' => array($product_db['price'], PDO::PARAM_STR),
            ':stock' => array($product_db['stock'], PDO::PARAM_STR),
            ':description_big' => array($product_db['description_big'], PDO::PARAM_STR),
            ':description_small' => array($product_db['description_small'], PDO::PARAM_STR),
            ':category' => array($category, PDO::PARAM_STR),
            ':creation_date' => array($product_db['creation_date'], PDO::PARAM_STR),
            ':image' => array($product_db['image'], PDO::PARAM_STR),
            ':number_of_review' => array($product_db['number_of_review'], PDO::PARAM_STR),
            ':number_of_stars' => array($product_db['number_of_stars'], PDO::PARAM_STR),
            ':custom_id' => array($product_db['custom_id'], PDO::PARAM_STR)
        ));
    }

    public static function CopyProduct(String $category, String $old_id, String $new_id){
        global $dblogin, $dbpassword, $dsn;
        $con = new Connexion($dsn, $dblogin, $dbpassword);

        $query = "SELECT name, price, stock, description_big, description_small, creation_date, image, custom_id FROM product WHERE id=:id;";
        $con->executeQuery($query, array(':id' => array($old_id, PDO::PARAM_STR)));
        $product_db = $con->getResults()[0];

        $query = "INSERT INTO product VALUES(:id, :id_copy, :name, :price, :stock, :description_big, :description_small, :category, :creation_date, :image, 0, 0, :custom_id);";
        $con->executeQuery($query, array(
            ':id' => array($new_id, PDO::PARAM_STR),
            ':id_copy' => array($new_id, PDO::PARAM_STR),
            ':name' => array($product_db['name'], PDO::PARAM_STR),
            ':price' => array($product_db['price'], PDO::PARAM_STR),
            ':stock' => array($product_db['stock'], PDO::PARAM_STR),
            ':description_big' => array($product_db['description_big'], PDO::PARAM_STR),
            ':description_small' => array($product_db['description_small'], PDO::PARAM_STR),
            ':category' => array($category, PDO::PARAM_STR),
            ':creation_date' => array($product_db['creation_date'], PDO::PARAM_STR),
            ':image' => array($product_db['image'], PDO::PARAM_STR),
            ':custom_id' => array($product_db['custom_id'], PDO::PARAM_STR)
        ));
    }

    public static function MoveProduct(String $new_category, String $id){
        global $dblogin, $dbpassword, $dsn;
        $con = new Connexion($dsn, $dblogin, $dbpassword);

        $query = "UPDATE product SET category=:category WHERE id=:id;";
        $con->executeQuery($query, array(
            ':id' => array($id, PDO::PARAM_STR),
            ':category' => array($new_category, PDO::PARAM_STR)
        ));
    }

    public static function DeleteProduct(String $id){
        global $dblogin, $dbpassword, $dsn;
        $con = new Connexion($dsn, $dblogin, $dbpassword);

        $query = "DELETE FROM product WHERE id=:id";
        $con->executeQuery($query, array(':id' => array($id, PDO::PARAM_STR)));
    }

    public static function SearchProductByID(String $id): Product
    {
        global $dblogin, $dbpassword, $dsn;
        $con = new Connexion($dsn, $dblogin, $dbpassword);

        $query ="SELECT name, parent, image, description, rank FROM category";
        $con->executeQuery($query);
        $categories = $con->getResults();

        $query = 'SELECT id, id_copy, name, price, stock, description_big, description_small, category, creation_date, image, number_of_review, number_of_stars, custom_id FROM product WHERE id=:id';
        $con->executeQuery($query, array('id' => array($id, PDO::PARAM_STR)));
        $result = $con->getResults()[0];

        foreach ($categories as $category) {
            if($category['name'] == $result['category']){
                $categ = new Category($category['name'], $category['parent'], new ImageCategory($category['image']), $category['description'], $category['rank']);
                $product = new Product($result['id'], $result['id_copy'], $result['name'], $result['price'], $result['stock'], $result['description_big'], $result['description_small'], $categ, $result['creation_date'], new ImageProduct(null, $result['image']), $result['number_of_review'], $result['number_of_stars'], $result['custom_id']);
            }
        }

        $query = "SELECT image FROM thumbnails WHERE product_id=:id;";
        $con->executeQuery($query, array(':id' => array($product->getId(), PDO::PARAM_STR)));
        $thumbnails_db = $con->getResults();
        if($thumbnails_db != null){
            foreach ($thumbnails_db as $t){
                $product->getImage()->addThumbnail(new Image($t['image']));
            }
        }

        return $product;
    }

    public static function SearchProductsByCategory(Category $category){
        global $dblogin, $dbpassword, $dsn;
        $con = new Connexion($dsn, $dblogin, $dbpassword);

        $product_list = array();

        $category_name = $category->getName();

        $query = "SELECT id, id_copy, name, price, stock, description_big, description_small, category, creation_date, image, number_of_review, number_of_stars, custom_id FROM product WHERE category=:category_name;";
        $con->executeQuery($query, array(':category_name' => array($category_name, PDO::PARAM_STR)));
        $products_list_db = $con->getResults();

        foreach ($products_list_db as $product_db){
            $product = new Product(
                $product_db['id'],
                $product_db['id_copy'],
                $product_db['name'],
                $product_db['price'],
                $product_db['stock'],
                $product_db['description_big'],
                $product_db['description_small'],
                $category,
                $product_db['creation_date'],
                new ImageProduct(null, $product_db['image']),
                $product_db['number_of_review'],
                $product_db['number_of_stars'],
                $product_db['custom_id']);

            $product_list[] = $product;
        }

        return $product_list;
    }

    public static function AddThumbnails($id, $thumbnails_name, $product_id){
        global $dblogin, $dbpassword, $dsn;
        $con = new Connexion($dsn, $dblogin, $dbpassword);

        $query = "INSERT INTO thumbnails VALUES(:id, :product_id, :image);";
        $con->executeQuery($query, array(
            ':id' => array($id, PDO::PARAM_STR),
            ':product_id' => array($product_id, PDO::PARAM_STR),
            ':image' => array($thumbnails_name, PDO::PARAM_STR),
        ));
    }

    public static function DeleteThumbnail(String $thumbnail_name, String $product_id){
        global $dblogin, $dbpassword, $dsn;
        $con = new Connexion($dsn, $dblogin, $dbpassword);

        $query = "DELETE FROM thumbnails WHERE image=:thumbnail_name AND product_id=:product_id;";
        $con->executeQuery($query, array(
            ':thumbnail_name' => array($thumbnail_name,PDO::PARAM_STR),
            ':product_id' => array($product_id, PDO::PARAM_STR)
        ));
    }
}